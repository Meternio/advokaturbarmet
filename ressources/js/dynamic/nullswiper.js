export class NullSwiper{constructor(){this.swipers=document.querySelectorAll(".clip__swiper")}init(){for(let t=0,i=this.swipers.length;t<i;t++){let i=this.swipers[t],r=i.querySelectorAll(".clipper");new e({parent:i,slides:r}).init()}}update(){this.swipers=document.querySelectorAll(".clip__swiper"),this.init()}}class e{constructor(e){this.parent=e.parent,this.clippers=e.slides}init(){let e=this.parent,t=this.clippers,i=e.getBoundingClientRect().width,r=e.querySelector(".aspect__ratio"),n=e.querySelector(".clip__background").querySelector("img"),l=e.querySelector(".bullets"),s=l.querySelectorAll(".bullet"),d=l.querySelector(".insert"),a=!s.length>0,c=e.querySelector(".credits"),o=e.querySelectorAll(".credit"),u=[],g=e=>gsap.timeline({defaults:{overwrite:"auto"}});for(let e=0,i=t.length;e<i;e++)u[e]=g();let p,x=!1,h=parseInt(e.getAttribute("data-slides")),f=0,v=!1,y="true"===e.getAttribute("data-autoplay"),w=e.getAttribute("data-interval"),S=6,q={dragging:!1,dirSet:!1,dir:"next",dirChange:!1,index:0},m=(e,t=q.dir)=>{switch(t){case"next":return e+1===h?0:e+1;case"prev":return e-1<0?h-1:e-1}},b=(e,i,r)=>{a?d.innerText=e+1:(l.querySelector(".active").classList.remove("active"),s[e].classList.add("active")),c.querySelector(".active").classList.remove("active"),o[e].classList.add("active");let p="inset(0% 0% 0% 0%)",x="next"===r?"inset(0% 0% 0% 100%)":"inset(0% 100% 0% 0%)";if(n.src=t[e].querySelector("img").src,q.dragging&&(q.dirChange&&v?(p="prev"===r?"inset(0% 0% 0% 100%)":"inset(0% 100% 0% 0%)",x=t[q.index].style.clipPath):x="next"===r?`inset(0% 0% 0% ${i}%)`:`inset(0% ${i}% 0% 0%)`),u[e].kill(),u[e]=g(),t[e].style.clipPath=x,t[e].style.zIndex=S,u[e].fromTo([t[e]],{clipPath:x},{clipPath:p,duration:.95,ease:"Expo.easeOut"}),q.dirChange&&v){q.dirChange=!1;let e="next"===q.dir?"prev":"next";q.index=m(q.index,e)}console.log(q.index)},A=()=>{for(let e=0,r=t.length;e<r;e++)t[e].querySelector(".slide").style.width=`${i}px`};(()=>{x=!0;let t=e.querySelectorAll(".lazy");if("IntersectionObserver"in window){let t=new IntersectionObserver((function(e){e.forEach((e=>{if(e.intersectionRatio>0){t.unobserve(e.target);let i=e.target.querySelectorAll(".lazy");if(i.length>0)for(let e=0,t=i.length;e<t;e++)i[e].innerHTML=i[e].getAttribute("data-html")}}))}),{rootMargin:"50px 0px",threshold:.01});t.observe(e)}else for(let e=0,i=t.length;e<i;e++)t[e].innerHTML=t[e].getAttribute("data-html")})(),A();new NullInteract({element:r,onStart:function(){y&&(y=!1,clearInterval(I))},onMove:function(){if(x)if(q.dirSet)if(q.dirChange&&v){u[q.index].kill();let e=100-(100-f-100/i*this.result.distanceX);e=e>=100?100:e<=0?0:e,t[q.index].style.clipPath="prev"===q.dir?`inset(0 0 0 ${e}%)`:`inset(0 ${e}% 0 0)`,t[q.index].style.zIndex=S}else{let e=100-100/i*this.result.distanceX;e=e>=100?100:e<=0?0:e,t[q.index].style.clipPath="next"===q.dir?`inset(0 0 0 ${e}%)`:`inset(0 ${e}% 0 0)`,t[q.index].style.zIndex=S}else if(this.result.distanceX>=5){S++,q.dragging=!0,q.dirSet=!0;let e=this.result.deltaX>=0?"prev":"next";q.dirChange=e!==q.dir,q.dir=e,v=u[q.index].progress()<1,q.dirChange&&v?(u[q.index].kill(),f=parseInt(t[q.index].style.clipPath.split(".")[0].replace(/[^0-9]/g,""))):q.index=m(q.index)}},onEnd:function(){if(x&&q.dragging){if(q.dirChange&&v<1){let e=100-f-100/i*this.result.distanceX;e=e>=100?100:e<=0?0:e,b(q.index,e,q.dir),v=!1}else{let e=100-100/i*this.result.distanceX;e=e>=100?100:e<=0?0:e,b(q.index,e,q.dir),void 0!==p&&window.clearTimeout(p),p=window.setTimeout((()=>{q.dragging=!1}),100)}q.dirSet=!1}}});r.addEventListener("click",(t=>{if(y&&(y=!1,clearInterval(I)),x&&!q.dragging){let r=t.clientX-e.offsetLeft;q.dir=r>i/2?"next":"prev",q.index=m(q.index),S++,b(q.index,0,q.dir)}}));for(let e=0,t=s.length;e<t;e++)s[e].addEventListener("click",(()=>{if(x){y&&(y=!1,clearInterval(I));let t=index(s[e])>q.index?"next":"prev";q.index=index(s[e]),S++,b(q.index,0,t)}}));let I=!!y&&window.setInterval((()=>{x&&(q.index=m(q.index),S++,b(q.index,0,"next"))}),{slowest:2e4,slow:1e4,medium:8e3,fast:6e3,fastest:4e3}[w]);window.addEventListener("resize",(()=>{i=e.getBoundingClientRect().width,A()}))}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
