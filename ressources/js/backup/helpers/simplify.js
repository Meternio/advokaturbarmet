export class Simplify{constructor(){}init(){window.delay=function(e){return e=e||2e3,new Promise((t=>{setTimeout((()=>{t()}),e)}))},window.rInterval=function(e,t){let n,i=Date.now,o=window.requestAnimationFrame,r=i(),c=function(){i()-r<t||(r+=t,e()),n||o(c)};return o(c),{clear:function(){n=1}}},window.exists=function(e){return void 0!==e&&null!=e},window.fastClick=Client.isTouch?"touchstart":"click",window.index=e=>Array.prototype.indexOf.call(e.parentNode.childNodes,e),window.ajax=async function(e=!1,t=window.location.href){if(!1!==e){let n=new window.XMLHttpRequest;return n.open("POST",t,!0),n.setRequestHeader("Content-type","application/x-www-form-urlencoded"),n.send(e),new Promise(((e,t)=>{n.onreadystatechange=function(){if(4===n.readyState&&200===n.status)try{e(n.responseText)}catch(e){t(e)}}}))}},window.fireEvent=(e,t)=>{let n=!!document.createEventObject,i=n?document.createEventObject():document.createEvent("HTMLEvents");return n||i.initEvent(t,!0,!0),n?e.fireEvent("on"+t,i):!e.dispatchEvent(i)}}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMvc2ltcGxpZnkuanMiXSwibmFtZXMiOlsiU2ltcGxpZnkiLCJbb2JqZWN0IE9iamVjdF0iLCJ3aW5kb3ciLCJkZWxheSIsIm4iLCJQcm9taXNlIiwiZG9uZSIsInNldFRpbWVvdXQiLCJySW50ZXJ2YWwiLCJjYWxsYmFjayIsInN0b3AiLCJkYXRlTm93IiwiRGF0ZSIsIm5vdyIsInJlcXVlc3RBbmltYXRpb24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdGFydCIsImludGVydmFsRnVuYyIsImNsZWFyIiwiZXhpc3RzIiwiZWxlbWVudCIsImZhc3RDbGljayIsIkNsaWVudCIsImlzVG91Y2giLCJpbmRleCIsIm5vZGUiLCJBcnJheSIsInByb3RvdHlwZSIsImluZGV4T2YiLCJjYWxsIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZXMiLCJhamF4IiwiYXN5bmMiLCJwYXJhbXMiLCJ1cmwiLCJsb2NhdGlvbiIsImhyZWYiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInJlc29sdmUiLCJyZWplY3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwiZXJyb3IiLCJmaXJlRXZlbnQiLCJldmVudCIsIklFIiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudE9iamVjdCIsImV2dCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCJdLCJtYXBwaW5ncyI6Ik9BQU8sTUFBTUEsU0FDVEMsZUFHQUEsT0FFSUMsT0FBT0MsTUFBUSxTQUFTQyxHQUVwQixPQURBQSxFQUFJQSxHQUFLLElBQ0YsSUFBSUMsU0FBUUMsSUFDZkMsWUFBVyxLQUNQRCxNQUNERixPQUtYRixPQUFPTSxVQUFVLFNBQVNDLEVBQVNOLEdBQy9CLElBR0lPLEVBSEFDLEVBQVFDLEtBQUtDLElBQ2JDLEVBQWlCWixPQUFPYSxzQkFDeEJDLEVBQU1MLElBRU5NLEVBQWEsV0FDVE4sSUFBVUssRUFBTWIsSUFBUWEsR0FBT2IsRUFBT00sS0FDdENDLEdBQU1JLEVBQWlCRyxJQUcvQixPQURBSCxFQUFpQkcsR0FDVixDQUNIQyxNQUFPLFdBQVlSLEVBQUssS0FLaENSLE9BQU9pQixPQUFTLFNBQVVDLEdBQ3RCLFlBQTRCLElBQWIsR0FBdUMsTUFBWEEsR0FJL0NsQixPQUFPbUIsVUFBWUMsT0FBT0MsUUFBVSxhQUFlLFFBR25EckIsT0FBT3NCLE1BQVNDLEdBQ0xDLE1BQU1DLFVBQVVDLFFBQVFDLEtBQUtKLEVBQUtLLFdBQVdDLFdBQVlOLEdBVXBFdkIsT0FBTzhCLEtBQU9DLGVBQWdCQyxHQUFTLEVBQU9DLEVBQU1qQyxPQUFPa0MsU0FBU0MsTUFDaEUsSUFBZSxJQUFYSCxFQUFrQixDQUVsQixJQUFJTCxFQUFPLElBQUkzQixPQUFPb0MsZUFNdEIsT0FMQVQsRUFBS1UsS0FBSyxPQUFRSixHQUFLLEdBQ3ZCTixFQUFLVyxpQkFBaUIsZUFBZ0IscUNBQ3RDWCxFQUFLWSxLQUFLUCxHQUdILElBQUk3QixTQUFRLENBQUNxQyxFQUFTQyxLQUN6QmQsRUFBS2UsbUJBQXFCLFdBQ3RCLEdBQXdCLElBQXBCZixFQUFLZ0IsWUFBb0MsTUFBaEJoQixFQUFLaUIsT0FDOUIsSUFDSUosRUFBUWIsRUFBS2tCLGNBQ2YsTUFBTUMsR0FDSkwsRUFBT0ssVUFTL0I5QyxPQUFPK0MsVUFBWSxDQUFDN0IsRUFBUzhCLEtBQ3pCLElBQUlDLElBQU9DLFNBQVNDLGtCQUNoQkMsRUFBTUgsRUFBS0MsU0FBU0Msb0JBQXNCRCxTQUFTRyxZQUFZLGNBSW5FLE9BSElKLEdBQ0FHLEVBQUlFLFVBQVVOLEdBQU8sR0FBTSxHQUV4QkMsRUFBSy9CLEVBQVE2QixVQUFVLEtBQU9DLEVBQU9JLElBQVFsQyxFQUFRcUMsY0FBY0giLCJmaWxlIjoiaGVscGVycy9zaW1wbGlmeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTaW1wbGlmeSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgLy8gRGVsYXkgRnVuY3Rpb24gZm9yIGF3YWl0XG4gICAgICAgIHdpbmRvdy5kZWxheSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIG4gPSBuIHx8IDIwMDA7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZG9uZSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9LCBuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVxdWVzdCBBbmltYXRpb24gRnJhbWUgSW50ZXJ2YWxcbiAgICAgICAgd2luZG93LnJJbnRlcnZhbD1mdW5jdGlvbihjYWxsYmFjayxkZWxheSkge1xuICAgICAgICAgICAgbGV0IGRhdGVOb3c9RGF0ZS5ub3csXG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbj13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLFxuICAgICAgICAgICAgICAgIHN0YXJ0PWRhdGVOb3coKSxcbiAgICAgICAgICAgICAgICBzdG9wLFxuICAgICAgICAgICAgICAgIGludGVydmFsRnVuYz1mdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZU5vdygpLXN0YXJ0PGRlbGF5fHwoc3RhcnQrPWRlbGF5LCBjYWxsYmFjaygpKTtcbiAgICAgICAgICAgICAgICAgICAgc3RvcHx8cmVxdWVzdEFuaW1hdGlvbihpbnRlcnZhbEZ1bmMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbihpbnRlcnZhbEZ1bmMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjbGVhcjogZnVuY3Rpb24oKXsgc3RvcD0xIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGEgZWxlbWVudCBleGlzdHNcbiAgICAgICAgd2luZG93LmV4aXN0cyA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiAoZWxlbWVudCkgIT0gJ3VuZGVmaW5lZCcgJiYgZWxlbWVudCAhPSBudWxsKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBGYXN0IGNsaWNrIGRldGVjdCB0b3VjaHN0YXJ0IHN1cHBvcnQgYW5kIHVzZSB0aGF0IGluc3RlYWQgb2YgY2xpY2tcbiAgICAgICAgd2luZG93LmZhc3RDbGljayA9IENsaWVudC5pc1RvdWNoID8gJ3RvdWNoc3RhcnQnIDogJ2NsaWNrJztcblxuICAgICAgICAvLyBHZXQgaW5kZXggb2YgZWxlbWVudCBpbiBwYXJlbnRcbiAgICAgICAgd2luZG93LmluZGV4ID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKG5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzLCBub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFhNTEhUVFAgUmVxdWVzdFxuICAgICAgICAvKiBVc2UgYXMgZm9sbG93OlxuICAgICAgICAqICAgIGFqYXgoJ3BhcmFtZXRlcj12YWx1ZScpXG4gICAgICAgICAgICAgICAgIC50aGVuKChhbnN3ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYW5zd2VyKTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgKiAqL1xuICAgICAgICB3aW5kb3cuYWpheCA9IGFzeW5jIGZ1bmN0aW9uIChwYXJhbXMgPSBmYWxzZSwgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gU3RhcnQgbmV3IFJlcXVlc3RcbiAgICAgICAgICAgICAgICBsZXQgY2FsbCA9IG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3Q7XG4gICAgICAgICAgICAgICAgY2FsbC5vcGVuKFwiUE9TVFwiLCB1cmwsIHRydWUpOyAgICAgICAgLy8gRGVmYXVsdCBpcyBzYW1lIHBhZ2VcbiAgICAgICAgICAgICAgICBjYWxsLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG4gICAgICAgICAgICAgICAgY2FsbC5zZW5kKHBhcmFtcyk7XG5cblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGwub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGwucmVhZHlTdGF0ZSA9PT0gNCAmJiBjYWxsLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjYWxsLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICB3aW5kb3cuZmlyZUV2ZW50ID0gKGVsZW1lbnQsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgSUUgPSAhIWRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0O1xuICAgICAgICAgICAgbGV0IGV2dCA9IElFID8gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKSA6IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiSFRNTEV2ZW50c1wiKTtcbiAgICAgICAgICAgIGlmKCFJRSkge1xuICAgICAgICAgICAgICAgIGV2dC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIElFID8gZWxlbWVudC5maXJlRXZlbnQoJ29uJyArIGV2ZW50LCBldnQpIDogIWVsZW1lbnQuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==
