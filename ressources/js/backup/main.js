import{ViewportFix as e}from"./helpers/viewportFix.js";import{ClientInformations as o}from"./helpers/clientInformations.js";import{EventHandler as t}from"./helpers/eventHandler.js";import{Simplify as r}from"./helpers/simplify.js";import{AddNullInteract as n}from"./helpers/nullInteract.js";import{CookieBanner as i}from"./static/cookie.js";import{Footer as a}from"./static/footer.js";import{Cursor as s}from"./dynamic/cursor.js";import{ScrollToTop as m}from"./dynamic/scrolltotop.js";import{LazyLoad as p}from"./dynamic/lazyload.js";import{LazyFades as l}from"./dynamic/lazyfades.js";import{MenuHandler as c}from"./dynamic/menuHandler.js";import{ThumbFader as d}from"./dynamic/thumbnailFader.js";import{SwiperStandard as f}from"./dynamic/swiper.js";import{NewsHandler as w}from"./dynamic/news.js";import{Intro as y}from"./dynamic/intro.js";import{Skills as j}from"./dynamic/skills.js";const u={eventHandler:new t,cursor:new s,lazyFades:new l,scrolltotop:new m,menuHandler:new c,lazyload:new p,ThumbFader:new d,Swiper:new f,News:new w,Skills:new j,intro:new y},b={viewportFix:new e,clientInformations:new o,simplify:new r,nullInteract:new n},h={cookie:new i,footer:new a};for(let e in b)"object"==typeof b[e]&&b[e].init();document.addEventListener("DOMContentLoaded",(()=>{for(let e in h)"object"==typeof h[e]&&h[e].init();for(let e in u)"object"==typeof u[e]&&u[e].init()}));let v=document.body;barba.init({sync:!0,schema:{prefix:"data-routing"},transitions:[{async once(e){gsap.fromTo([document.body],{opacity:0},{opacity:1,duration:1})},async leave(e){v.classList.remove("has__intro");const o=this.async();var t;gsap.timeline({repeat:0}).to([v],{autoAlpha:0,ease:"power3.inOut",duration:.6},"+=0"),await(t=620,t=t||2e3,new Promise((e=>{setTimeout((()=>{e()}),t)}))),o()},async enter(e){}}]}),barba.hooks.enter((()=>{window.scrollTo(0,0)})),barba.hooks.after((()=>{gsap.timeline({repeat:0}).to([v],{autoAlpha:1,ease:"power3.inOut",duration:.6},"+=0");for(let e in u)"object"==typeof u[e]&&u[e].update()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
